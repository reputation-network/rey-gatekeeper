import { Factory, SignStrategies } from "rey-sdk";
import { dummySignature, encodeUnsignedJwt } from "rey-sdk/dist/utils";
import DevAccounts from "./accounts";

function buildValidAppParams() {
  const [readerAccount, , subjectAccount] = DevAccounts;
  const [reader, source, subject, verifier] = DevAccounts.map((a) => a.address);
  const [manifest, expiration] = [`0x${"c".repeat(64)}`, Math.floor(Date.now() / 1000) + 3600];
  const [fee, nonce, value, counter] = [0, 1, 0, 1].map((e) => e.toString());

  return Factory.buildAppParams({
    version: "1.0",
    request: {
      readPermission: { reader, source, subject, manifest, expiration },
      session: { subject, verifier, fee, nonce },
      value,
      counter,
    },
    extraReadPermissions: [],
  }, {
    reader: SignStrategies.privateKey(readerAccount.privateKey),
    subject: SignStrategies.privateKey(subjectAccount.privateKey),
  });
}

/**
 * Returns a valid access token
 */
export async function valid() {
  const appParams = await buildValidAppParams();
  return encodeUnsignedJwt(appParams);
}

/**
 * Returns an access token that has missing the request.session property
 */
export async function wrongFormat() {
  const appParams = await buildValidAppParams();
  const appParamsWoSession = {
    ...appParams,
    request: { ...appParams.request, session: undefined },
  };
  return encodeUnsignedJwt(appParamsWoSession);
}

/**
 * Returns an access token where request.readPermission.subject != request.session.subject
 */
export async function wrongSessionSubject() {
  const appParams = await buildValidAppParams();
  const tamperedAppParams = {
    ...appParams,
    request: {
      ...appParams.request,
      session: {
        ...appParams.request.session,
        subject: appParams.request.readPermission.reader,
      },
    },
  };
  return encodeUnsignedJwt(tamperedAppParams);
}

/**
 * Returns an access token where request.readPermission.signature is not generated by the subject
 */
export async function wrongSignedPermission() {
  const appParams = await buildValidAppParams();
  const tamperedAppParams = {
    ...appParams,
    request: {
      ...appParams.request,
      readPermission: {
        ...appParams.request.readPermission,
        signature: dummySignature(),
      },
    },
  };
  return encodeUnsignedJwt(tamperedAppParams);
}

/**
 * Returns an access token where request.readPermission.expiration is for the past
 */
export async function expired() {
  const expiration = Math.floor(Date.now() / 1000) - 100;
  const appParams = await buildValidAppParams();
  const expiredAppParams = {
    ...appParams,
    request: {
      ...appParams.request,
      readPermission: {
        ...appParams.request.readPermission,
        expiration,
      },
    },
  };
  return encodeUnsignedJwt(expiredAppParams);
}
